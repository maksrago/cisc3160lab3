* Lab Activity 3
** Language #1 - Rust
*** Dependencies
    - rustc
*** Euler Problem #1
**** Problem
     #+BEGIN_QUOTE
     If we list all the natural numbers below 10 that are multiples of 3
     or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

     Find the sum of all the multiples of 3 or 5 below 1000.
     #+END_QUOTE

     [[https://projecteuler.net/problem=1][Link to problem]]

**** Pseudo-code
     To begin, in order to solve this problem along with the other Euler
     problems we will need to think more mathematically.

     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
 Initiate a sum variable then set this variable to 0.

 Run a for loop exactly 1000 times (this would mean it's bounds are between [0, 1000), and needed in the problem statement.
 
 Within that loop check if the variable is divisible by 3, or 5.
 If this number is divisible by 3 or 5, add that number to the sum.
 
 In the end print the total sum.
     #+END_SRC

**** References
     Since this is my first time working in Rust, I'll need to look up
     many of the core basics syntactically. Rust is similar to C/C++ and
     many ways, both are imperative languages, and Rust heavily drew upon
     concepts in C, thus most of the logic I've laid out in the pseudo-code
     should work fine.

     The references used for this assignment were:
     - [[https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html][Variables and Mutability]]
     - [[https://doc.rust-lang.org/book/ch03-03-how-functions-work.html][Functions]]
     - [[https://doc.rust-lang.org/1.0.0/book/for-loops.html][for Loops]]
     - [[https://doc.rust-lang.org/stable/rust-by-example/flow_control/if_else.html][if/else]]
     - [[https://doc.rust-lang.org/stable/rust-by-example/conversion/string.html][To and from strings]]
     - [[https://doc.rust-lang.org/std/macro.println.html][println]]

**** Reflection
     One of the biggest difference between Rust and other programming
     languages that I've worked with was having to declare mutability for
     a variable upon creating it. Mutability to my knowledge, is another
     word for a form of announcing if a variable is to be changed later
     in, that is if marked as mutable. If a variable is initiated without
     a declaration of mutability then it is assumed that the value does
     not change.

     Another note, is that I used a variable y that held the converted
     last value of x then used a comparison statement to check if the last
     digit fell within the rules for multiplicity of 5.

     Fundamentally, this problem is quite simple, however I found that the
     Rust implementations of the much of easy to understand syntax from
     C*, was not so straight forward in Rust.
**** Source/Compilation
***** Source Code
      1.rs
***** Compilation command
      #+BEGIN_SRC bash
      rustc 1.rs -o 1 && ./1
      #+END_SRC
****** Output
      #+BEGIN_SRC bash
      sum = 233168
      #+END_SRC
*** Euler Problem #2
**** Problem
     #+BEGIN_QUOTE
     Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     #+END_QUOTE
 
     [[https://projecteuler.net/problem=2][Link to problem]]

**** Pseudo-code
     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
 x will act as the first term.
 y will act as the second term.

 z will be a addition of x and y, and act as the third term.

 While we are under 4,000,000 test to see if a number is even (i.e. modulo 2 == 0)

 If the number is even, add it to the sum variable, and once finished print the total sum.
     #+END_SRC

**** References
     The references used for this assignment were (on top of the previous
     references):
     - [[https://doc.rust-lang.org/1.1.0/book/while-loops.html][While loops]]

**** Reflection
     This problem didn't post any additional issues compared to the first
     one, the implementation of the pseudo-code was actually very straight
     forward and it allowed me to practice a bit more with variable mutability.
**** Source/Compilation
***** Source Code
      2.rs
***** Compilation command
      #+BEGIN_SRC bash
      rustc 2.rs -o 2 && ./2
      #+END_SRC
****** Output
      #+BEGIN_SRC bash
      sum = 4613732
      #+END_SRC
*** Euler Problem #3
**** Problem
     #+BEGIN_QUOTE
     The prime factors of 13195 are 5, 7, 13 and 29.

     What is the largest prime factor of the number 600851475143?
     #+END_QUOTE
 
     [[https://projecteuler.net/problem=3][Link to problem]]

**** Pseudo-code
     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
 Have some sort of function that can determine if a number is prime, ideally return true or false.
 
 Set the prime number we're looking for equal to max.

 Run a for loop up until the max value that checks each iterated value to see if it's prime.
 If that number is prime and also a prime factor set it equal to largest_prime.

 After the loop is finished print the value of largest_prime.
     #+END_SRC

**** References
     The references used for this assignment were (on top of the previous
     references):
     - [[https://doc.rust-lang.org/book/ch03-02-data-types.html][Data Types]]

**** Reflection
     This problem proved to be a lot more difficult than the
     previous 2. The way in which function return types are denoted
     syntactically along with the way in which variables are declared
     right away as signed and unsigned made things a bit more
     confusing. Typically in C* you are well aware of the ranges of data
     types, and things mostly just take care of themselves, in Rust, a
     significant amount more thought is needed to be considered.

**** Source/Compilation
***** Source Code
      3.rs
***** Compilation command
      #+BEGIN_SRC bash
      rustc 3.rs -o 3 && ./3
      #+END_SRC
****** Output
      #+BEGIN_SRC bash
      Prime Factor = 71
      Prime Factor = 839
      Prime Factor = 1471
      Prime Factor = 6857
      #+END_SRC
*** Euler Problem #7
**** Problem
     #+BEGIN_QUOTE
     By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

     What is the 10,001st prime number?
     #+END_QUOTE
 
     [[https://projecteuler.net/problem=7][Link to problem]]

**** Pseudo-code
     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
 Have some sort of function that tests to see if a number is prime, we can use the function we made from the previous problem.

 Set some sort of arbitrary variable to set a maximum of prime locations + 1.
 Set a counter variable to track how many prime's we've discovered.
 Set a variable to track what that prime number is.

 Run a for loop up to the maximum arbitrary varible that we found, and test to see if a number is prime.
 If a number is indeed prime, iterate the counter, and track that prime.

 Once we the counter reaches 10,001, print the found prime number, and break out of the loop.
     #+END_SRC

**** References
     There were no additional references used in this program.

**** Reflection
     This problem felt very comfortable after the previous 3, and much of
     the code was reused.

**** Source/Compilation
***** Source Code
      7.rs
***** Compilation command
      #+BEGIN_SRC bash
      rustc 7.rs -o 7 && ./7
      #+END_SRC
****** Output
      #+BEGIN_SRC bash
      10,000th Prime Number = 104743
      #+END_SRC
*** Euler Problem #25
**** Problem
     #+BEGIN_QUOTE
     The Fibonacci sequence is defined by the recurrence relation:
     Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
    
     Hence the first 12 terms will be:
     F1 = 1
     F2 = 1
     F3 = 2
     F4 = 3
     F5 = 5
     F6 = 8
     F7 = 13
     F8 = 21
     F9 = 34
     F10 = 55
     F11 = 89
     F12 = 144
    
     The 12th term, F12, is the first term to contain three digits.
     What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
     #+END_QUOTE
 
     [[https://projecteuler.net/problem=25][Link to problem]]

**** Pseudo-code
     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
     Assign a variable x to act as the first term.
     Assign a variable y to act as the second term.
     Assign a variable z to act as the sum of x and y, or as the third term.

     Run a for loop an arbitrary amount of times, and on the 1000th cycle of the loop, print the index of the Fibonacci sequence, along with it's value.
     #+END_SRC

**** References
     There were no additional references used in this program.
**** Reflection
     This problem proved to be quite difficult for me, I don't think I
     was in the right head-space when attempting to solve it, since I
     had done 4 prior to it. The solution is incorrect to my
     knowledge, but I believe my solution was somewhere within the
     realm of being on the right track.
**** Source/Compilation
***** Source Code
      25.rs
***** Compilation command
      #+BEGIN_SRC bash
      rustc 25.rs -o 25 && ./25
      #+END_SRC
****** Output
      #+BEGIN_SRC bash
      F(17) = 1597
      #+END_SRC
** Language #2 - Python
*** Dependencies
    - Python 3
    - Tkinter
    - PAGE (if you wish to edit the GUI through another GUI)
*** pyCulator
**** Problem
     Create a GUI calculator using Python.
**** Pseudo-code
     The pseudo-code for this problem can be thought of as:

     #+BEGIN_SRC markup
     To begin, find a simple GUI library for Python.

     Each button will act as its denoted operation, when clicking on a number it should display it on an object that will act as a display.
     
     When clicking an operator it should take 2 operands.
     
     Have some sort of error checking for the calculator.
     #+END_SRC
**** References
     The TKinter library makes it extremely easy to implement and create a graphical user interface using Python, and I found it to be extremely intuitive after working with Swing in Java.

     - [[https://docs.python.org/3/library/tkinter.html][Tkinter Documenation]]
     - [[http://page.sourceforge.net/][PAGE GUI builder]]
**** Reflection
     The arithmetic programming of this calculator was extremely straight forward, the honestly the most difficult part of making the calculator came from the tremendous amount of constant error checking for GUI elements to render properly. The TKinter documentation was extremely helpful, and I think that using the PAGE tool made it very easy to develop the GUI for the calculator.
**** Source/Compilation
***** Source Code
      pyCulator.py
***** Compilation command
      #+BEGIN_SRC bash
      python3 pyCulator.py
      #+END_SRC
****** Output
       [[./python/pyCulator.png]]
